- name: Install Docker on Debian 11 & start the containers
  become: yes
  hosts: host1

  vars:
    client_image: sgumbe/yolo-latest:1.1.0
    backend_image: sgumbe/yolo-latest:1.2.0
    app_folder: /opt/yolo
    compose_file_src: /home/gumbe12/WEEK9-ANSIBLE/YOLO/docker-compose.yml
    compose_file_dest: "{{ app_folder }}/docker-compose.yml"
  tasks:
    - name: Update the cache
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install packages on Debian-based systems
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        update_cache: yes

    - name: Add Docker official GPG key to the system.
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add docker repository to the system
      apt_repository:
        repo: deb https://download.docker.com/linux/debian bullseye stable
        state: present

    - name: Update the cache
      apt:
        update_cache: yes

    - name: Install Docker-related packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
          - docker-compose
        update_cache: yes

    - name: Install the Docker module for Python, required by ansible
      pip:
        name: docker

    - name: Pull the client image
      community.docker.docker_image:
        name: "{{ client_image }}"
        source: pull

    - name: Pull the backend image
      community.docker.docker_image:
        name: "{{ backend_image }}"
        source: pull

    - name: Create app folder
      file:
        path: "{{ app_folder }}"
        state: directory

    - name: Create backend folder
      file:
        path: "{{ app_folder }}/backend"
        state: directory

    - name: Create app directory for client container
      docker_container:
        name: yolo-client
        image: "{{ client_image }}"
        command: "mkdir -p /app"
        state: started
        volumes:
          - "{{ app_folder }}/client:/app"
        restart_policy: always

    - name: Create app directory for backend container
      docker_container:
        name: yolo-backend
        image: "{{ backend_image }}"
        command: "mkdir -p /app"
        state: started
        volumes:
          - "{{ app_folder }}/backend:/app"
        restart_policy: always

    - name: Create client directories
      file:
        path: "{{ app_folder }}/client/{{ item }}"
        state: directory
      loop:
        - src

    - name: Copy backend Dockerfile
      copy:
        src: /home/gumbe12/WEEK9-ANSIBLE/YOLO/backend/Dockerfile
        dest: "{{ app_folder }}/backend/Dockerfile"

    - name: Copy backend environment file
      copy:
        src: /home/gumbe12/WEEK9-ANSIBLE/YOLO/backend/.env
        dest: "{{ app_folder }}/backend/.env"

    - name: Copy docker-compose file to target hosts
      copy:
        src: "{{ compose_file_src }}"
        dest: "{{ compose_file_dest }}"

    - name: Create client public directory
      file:
        path: "{{ app_folder }}/client/public"
        state: directory

    - name: Copy client package.json
      copy:
        src: /home/gumbe12/WEEK9-ANSIBLE/YOLO/client/package.json
        dest: "{{ app_folder }}/client/package.json"
        mode: 0644

    - name: Copy index.html to client container
      copy:
        src: /home/gumbe12/WEEK9-ANSIBLE/YOLO/client/public/index.html
        dest: "{{ app_folder }}/client/public/index.html"
        mode: 0644

    - name: Copy index.js to client container
      copy:
        src: /home/gumbe12/WEEK9-ANSIBLE/YOLO/client/src/index.js
        dest: "{{ app_folder }}/client/src/index.js"
        mode: 0644

    - name: Copy backend package.json
      copy:
        src: /home/gumbe12/WEEK9-ANSIBLE/YOLO/backend/package.json
        dest: "{{ app_folder }}/backend/package.json"
        mode: 0644

    - name: Start backend container
      docker_container:
        name: yolo-backend
        image: "{{ backend_image }}"
        ports:
          - "5000:5000"
        volumes:
          - "{{ app_folder }}/backend:/app"
          - "{{ app_folder }}/backend/.env:/app/.env"
          - "/app/node_modules"
        restart_policy: always

    - name: Print container status
      shell: docker ps -a --filter name=yolo-
      register: container_output
      changed_when: false
      failed_when: false

    - name: Verify backend container status
      assert:
        that:
          - "'yolo-backend' in container_output.stdout"
        fail_msg: "Backend container is not running."

    - name: Start client container
      docker_container:
        name: yolo-client
        image: "{{ client_image }}"
        ports:
          - "3000:3000"
        volumes:
          - "{{ app_folder }}/client:/app"
          - "/app/node_modules"
        restart_policy: always
      async: 120
      poll: 0  

    - name: Verify client container status
      assert:
        that:
          - "'yolo-client' in container_output.stdout"
        fail_msg: "Client container is not running."

    - name: Start Docker containers
      command: docker-compose up -d
      args:
        chdir: "{{ app_folder }}"

    - name: Verify containers are running
      shell: docker-compose ps
      register: compose_output

    - name: Verify backend container status
      assert:
        that:
          - "'yolo-backend' in compose_output.stdout"
        fail_msg: "Backend container is not running."

    - name: Verify client container status
      assert:
        that:
          - "'yolo-client' in compose_output.stdout"
        fail_msg: "Client container is not running."

